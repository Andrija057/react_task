{"version":3,"sources":["index.js"],"names":["App","useState","current","setCurrent","error","setError","colors","setColor","manualError","setManualError","inputValue","setInputValue","draggingItem","useRef","dragOverItem","handleDragEnd","e","listCopy","draggingItemContent","splice","fetchColor","a","fetch","then","response","json","data","fetchedColor","length","includes","indexOf","concat","catch","console","log","colorList","map","color","position","desc","selStyle","backStyle","isDark","className","draggable","style","backgroundColor","onDragStart","handleDragStart","onDragEnter","handleDragEnter","onDragEnd","display","onClick","fontWeight","userInput","buttonBG","type","onKeyDown","event","key","target","value","userColor","val","isNaN","Number","onChange","r","g","b","slice","replace","Math","sqrt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85ee46c6.chunk.js","sourcesContent":["import React,{ useState,useRef  } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction App()  {\r\n\r\n\tconst [current, setCurrent] = useState(0);\r\n\tconst [error, setError]=useState(null);\t\t\t//GET error\r\n\tconst [colors, setColor]=useState(['000']);\t\t//color list\r\n\tconst [manualError, setManualError]=useState(null);  \r\n\tconst [inputValue,setInputValue]=useState('');\t//user input value\r\n\r\n\t//dragging from from https://blog.usejournal.com/implementing-react-drag-and-drop-without-any-external-library-d7ec00437afb\r\n\tconst draggingItem = useRef();\r\n\tconst dragOverItem = useRef();\r\n\tconst handleDragStart = (e, position) => {\r\n\t\tdraggingItem.current = position;\r\n\t};\r\n\tconst handleDragEnter = (e, position) => {\r\n\t\tdragOverItem.current = position;\r\n\t};\r\n\t//insert dragged item between items\r\n\tconst handleDragEnd = (e) => {\r\n\t\tconst listCopy = [...colors];\r\n\t\tconst draggingItemContent = listCopy[draggingItem.current];\r\n\t\tlistCopy.splice(draggingItem.current, 1);\r\n\t\tlistCopy.splice(dragOverItem.current, 0, draggingItemContent);\r\n\t\tdraggingItem.current = null;\r\n\t\tdragOverItem.current = null;\r\n\t\tsetColor(listCopy);\r\n\t};\r\n\t \r\n    //this gets color from colr.org - there is a bug that fetches the same response after 1st on chrome\r\n\t//if not in developer mode\r\n    const fetchColor = async() => {\r\n\tfetch(\"https://www.colr.org/json/color/random\")\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => {\r\n\t\t\tlet fetchedColor=data.colors[0][\"hex\"];\r\n\t\t\t//sometimes colr.org gives response with empty 'hex' (timestamp is ok)\r\n\t\t\t//console.log(data.colors[0]);\r\n\t\t\tif (!fetchedColor || fetchedColor.length<3)\r\n\t\t\t\treturn;\r\n\t\t\tif (colors.includes(fetchedColor))\t//color already exists\r\n\t\t\t{\r\n\t\t\t\tsetCurrent(colors.indexOf(fetchedColor));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tsetColor(colors => colors.concat(fetchedColor)); //add color\r\n\t\t\t\tsetCurrent(colors.length);\t\t\t\t\t\t //and select\r\n\t\t\t}\r\n\t\t\tif (error)\r\n\t\t\t\tsetError(null); //remove error if exists\r\n\t\t})\r\n\t\t.catch(e => {\r\n                console.log(e);\r\n                setError(e); //will be displayed to user\r\n            });\t\r\n\t}\r\n\t//on key 'Enter' check if input is valid color and add it to the list\r\n\tconst onInputKeyDown = (event) => {\r\n\t\tif (event.key === 'Enter' && event.target.value.length>1)\r\n\t\t{\r\n\t\t\tlet userColor=event.target.value;\r\n\t\t\tif (!isHex(userColor))\t//check if color is valid\r\n\t\t\t{\r\n\t\t\t\tsetManualError('Input is not valid hex color');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (colors.includes(userColor))\t\t//color already exists\r\n\t\t\t{\r\n\t\t\t\tsetCurrent(colors.indexOf(userColor));\t//so just select it\r\n\t\t\t\tsetInputValue('');\t\t\t\t\t\t//reset input value\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tsetColor(colors => colors.concat(userColor)); //add color to list\r\n\t\t\t\tsetCurrent(colors.length);\t\t//mark as current color\r\n\t\t\t\tif (manualError) \r\n\t\t\t\t\tsetManualError(null);\t\t//remove error if exists\r\n\t\t\t\tsetInputValue('');\t\t\t\t//reset input value\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//store current input value so that it can be cleared if color is accepted\r\n\tconst onInputChange = (event) => {\r\n\t\tif (event.key !== 'Enter')\r\n\t\t{\r\n\t\t\tsetInputValue(event.target.value);\r\n\t\t}\r\n\t}\r\n\t//assemble color list that is draggable, has small div for color display as well as \r\n\t//text indicating hex color. As text color could be the same or similar\r\n\t//to background there is 'backStyle' which alters list item background\r\n \tconst colorList=colors.map((color,position)=> {\r\n\t\tconst desc='Color #'+color;\r\n\t\tconst selStyle=position===current?'bolder':'normal';\r\n\t\tconst backStyle=isDark(color)?'#B4B4B4':'#242A38';\r\n\t\treturn (\r\n\t\t\t\t<li key={position} \r\n\t\t\t\t\tclassName=\"listItem\" draggable \r\n\t\t\t\t\tstyle={{backgroundColor:backStyle}}\r\n\t\t\t\t\tonDragStart={(e) => handleDragStart(e, position)}\r\n\t\t\t\t\tonDragEnter={(e) => handleDragEnter(e, position)}\r\n\t\t\t\t\tonDragEnd={handleDragEnd}>\r\n\t\t\t\t<div className='col-3' style={{display: 'inline',backgroundColor:'#'+color}}>&nbsp;</div>\r\n\t\t\t\t<button className='btn' onClick={()=>setCurrent(position)} \r\n\t\t\t\t\tstyle={{fontWeight:selStyle, color:'#'+color}}>{desc}\r\n\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t});\r\n\t//if there is an error, display it instead of default input label\r\n\tconst userInput=manualError?manualError:'Enter color (hex value)';\r\n\tconst buttonBG=isDark(colors[current])?'btn-light':'btn-secondary';//this should be set better\r\n    return (\r\n \t<>\r\n\t\t<div className=\"container controlContainer\">\r\n\t\t\t <div className=\"text-center\">\r\n\t\t\t\t<h2>React test task - fetching random colors</h2>\r\n\t\t\t\t<div className=\"row buttonRow\">\r\n\t\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t\t<span>Click to fetch new color</span><br />\r\n\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\tclassName={'btn fetchButton '+buttonBG}\r\n\t\t\t\t\t\t\tonClick={fetchColor} \r\n\t\t\t\t\t\t\tstyle={{color:'#'+ colors[current]}}>\r\n\t\t\t\t\t\t\tFETCH COLOR \r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<p>{error}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t\t<span>{userInput}</span><br />\r\n\t\t\t\t\t\t<input type='text' \r\n\t\t\t\t\t\t\tonKeyDown={onInputKeyDown} \r\n\t\t\t\t\t\t\tonChange={onInputChange} \r\n\t\t\t\t\t\t\tvalue={inputValue}>\r\n\t\t\t\t\t\t</input>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"spacing\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\t\r\n\t\t<div className=\"container listContainer\">\r\n\t\t\t<ul>\r\n\t\t\t{colorList}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</>\r\n\t);\r\n}\r\n\r\n//helper to check if input value is hex color\r\nfunction isHex(val)\r\n{\r\n  return typeof val === 'string' \r\n\t  && (val.length===3 || val.length===6)\r\n      && !isNaN(Number('0x' + val))\r\n}\r\n//from https://stackoverflow.com/questions/12043187/how-to-check-if-hex-color-is-too-black\r\n//to determine if color is too dark for default background\r\n\r\n//function from https://awik.io/determine-color-bright-dark-using-javascript/\r\nfunction isDark(color) {\r\n\r\n    // Variables for red, green, blue values\r\n    var r, g, b, hsp;\r\n    color = +(\"0x\" + color.slice(1).replace( \r\n    color.length < 5 && /./g, '$&$&'));\r\n    r = color >> 16;\r\n    g = (color >> 8) & 255;\r\n    b = color & 255;\r\n    \r\n    hsp = Math.sqrt(\r\n    0.299 * (r * r) +\r\n    0.587 * (g * g) +\r\n    0.114 * (b * b)\r\n    );\r\n    if (hsp>60) //even though 128 is standard limit, for this purpose I look only for really dark colors\r\n\t\treturn false;\r\n    return true;\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}