{"version":3,"sources":["index.js"],"names":["App","useState","current","setCurrent","error","setError","colors","setColor","manualError","setManualError","draggingItem","useRef","dragOverItem","handleDragEnd","e","listCopy","draggingItemContent","splice","fetchColor","a","fetch","then","response","json","data","fetchedColor","length","includes","indexOf","concat","catch","console","log","colorList","map","color","position","desc","selStyle","draggable","onDragStart","handleDragStart","onDragEnter","handleDragEnter","onDragEnd","className","style","display","backgroundColor","onClick","fontWeight","userInput","type","onKeyDown","event","val","key","target","value","isNaN","Number","ReactDOM","render","document","getElementById"],"mappings":"2KAIA,SAASA,IAER,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAyBJ,mBAAS,CAAC,QAAnC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAoCN,mBAAS,MAA7C,mBAAOO,EAAP,KAAoBC,EAApB,KAGMC,EAAeC,mBACfC,EAAeD,mBAOfE,EAAgB,SAACC,GACtB,IAAMC,EAAQ,YAAOT,GACfU,EAAsBD,EAASL,EAAaR,SAClDa,EAASE,OAAOP,EAAaR,QAAS,GACtCa,EAASE,OAAOL,EAAaV,QAAS,EAAGc,GACzCN,EAAaR,QAAU,KACvBU,EAAaV,QAAU,KACvBK,EAASQ,IAGDG,EAAU,uCAAG,sBAAAC,EAAA,sDACtBC,MAAM,0CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,IAAIC,EAAaD,EAAKlB,OAAO,GAAZ,KAGZmB,GAAgBA,EAAaC,OAAO,IAErCpB,EAAOqB,SAASF,GAEnBtB,EAAWG,EAAOsB,QAAQH,KAI1BlB,GAAS,SAAAD,GAAM,OAAIA,EAAOuB,OAAOJ,MACjCtB,EAAWG,EAAOoB,SAEnBrB,EAAS,QAETyB,OAAM,SAAAhB,GACOiB,QAAQC,IAAIlB,GACZT,EAASS,MAtBF,2CAAH,qDA0CZmB,EAAU3B,EAAO4B,KAAI,SAACC,EAAMC,GAClC,IAAMC,EAAK,UAAUF,EACfG,EAASF,IAAWlC,EAAQ,SAAS,SAC3C,OACE,qBAAmBqC,WAAS,EAC3BC,YAAa,SAAC1B,GAAD,OA/DO,SAACA,EAAGsB,GAC3B1B,EAAaR,QAAUkC,EA8DAK,CAAgB3B,EAAGsB,IACvCM,YAAa,SAAC5B,GAAD,OA7DO,SAACA,EAAGsB,GAC3BxB,EAAaV,QAAUkC,EA4DAO,CAAgB7B,EAAGsB,IACvCQ,UAAW/B,EAHZ,UAIA,qBAAKgC,UAAU,QAAQC,MAAO,CAACC,QAAS,SAASC,gBAAgB,IAAIb,GAArE,kBACA,wBAAQU,UAAU,MAAMI,QAAS,kBAAI9C,EAAWiC,IAC/CU,MAAO,CAACI,WAAWZ,EAAUH,MAAM,IAAIA,GADxC,SACiDE,MANxCD,MAWNe,EAAU3C,GAAwB,0BACrC,OACD,sBAAKqC,UAAU,YAAf,UACC,4EACA,sBAAKA,UAAU,MAAf,UACC,sBAAKA,UAAU,QAAf,UACC,wBACCI,QAAS/B,EACT4B,MAAO,CAACX,MAAM,IAAK7B,EAAOJ,IAF3B,6BAKA,4BAAIE,OAEL,sBAAKyC,UAAU,QAAf,UACC,+BAAOM,IAAiB,uBACxB,uBAAOC,KAAK,OAAOC,UA/CN,SAACC,GA2DpB,IAAeC,EAzDK,UAAdD,EAAME,KAAmBF,EAAMG,OAAOC,MAAMhC,OAAO,IA2DjC,kBAFT6B,EAvDFD,EAAMG,OAAOC,QA0DpBH,EAAI7B,OAAO,GAAK6B,EAAI7B,OAAO,IACvBiC,MAAMC,OAAO,KAAOL,KAzD1BhD,GAAS,SAAAD,GAAM,OAAIA,EAAOuB,OAAOyB,EAAMG,OAAOC,UAC9CvD,EAAWG,EAAOoB,QAClBjB,EAAe,KAIfA,EAAe,0CAsCf,6BACEwB,OAeN4B,IAASC,OAAO,cAAC9D,EAAD,IAAS+D,SAASC,eAAe,W","file":"static/js/main.3daa6057.chunk.js","sourcesContent":["import React,{ useState,useRef  } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nfunction App()  {\r\n\r\n\tconst [current, setCurrent] = useState(0);\r\n\tconst [error, setError]=useState(null);\r\n\tconst [colors, setColor]=useState(['000']);\r\n\tconst [manualError, setManualError]=useState(null);\r\n\r\n\t//dragging from from https://blog.usejournal.com/implementing-react-drag-and-drop-without-any-external-library-d7ec00437afb\r\n\tconst draggingItem = useRef();\r\n\tconst dragOverItem = useRef();\r\n\tconst handleDragStart = (e, position) => {\r\n\t\tdraggingItem.current = position;\r\n\t};\r\n\tconst handleDragEnter = (e, position) => {\r\n\t\tdragOverItem.current = position;\r\n\t};\r\n\tconst handleDragEnd = (e) => {\r\n\t\tconst listCopy = [...colors];\r\n\t\tconst draggingItemContent = listCopy[draggingItem.current];\r\n\t\tlistCopy.splice(draggingItem.current, 1);\r\n\t\tlistCopy.splice(dragOverItem.current, 0, draggingItemContent);\r\n\t\tdraggingItem.current = null;\r\n\t\tdragOverItem.current = null;\r\n\t\tsetColor(listCopy);\r\n\t};\r\n\t \r\n    const fetchColor = async() => {\r\n\tfetch(\"https://www.colr.org/json/color/random\")\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => {\r\n\t\t\tlet fetchedColor=data.colors[0][\"hex\"];\r\n\t\t\t//sometimes colr.org gives response with empty 'hex'\r\n\t\t\t//console.log(data.colors[0]);\r\n\t\t\tif (!fetchedColor || fetchedColor.length<3)\r\n\t\t\t\treturn;\r\n\t\t\tif (colors.includes(fetchedColor))\t//color already exists\r\n\t\t\t{\r\n\t\t\t\tsetCurrent(colors.indexOf(fetchedColor));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tsetColor(colors => colors.concat(fetchedColor));\r\n\t\t\t\tsetCurrent(colors.length);\r\n\t\t\t}\r\n\t\t\tsetError('');\r\n\t\t})\r\n\t\t.catch(e => {\r\n                console.log(e);\r\n                setError(e);\r\n            });\t\r\n\t}\r\n\tconst userColor = (event) => {\r\n\t\t//if color is a color, add it, else ignore\r\n\t\tif (event.key === 'Enter' && event.target.value.length>1)\r\n\t\t{\r\n\t\t\tif (isHex(event.target.value))\r\n\t\t\t{\r\n\t\t\t\tsetColor(colors => colors.concat(event.target.value));\r\n\t\t\t\tsetCurrent(colors.length);\r\n\t\t\t\tsetManualError('');\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tsetManualError('Input is not valid hex color');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t  \r\n \tconst colorList=colors.map((color,position)=> {\r\n\t\tconst desc='Color #'+color;\r\n\t\tconst selStyle=position===current?'bolder':'normal';\r\n\t\treturn (\r\n\t\t\t\t<li key={position} draggable \r\n\t\t\t\t\tonDragStart={(e) => handleDragStart(e, position)}\r\n\t\t\t\t\tonDragEnter={(e) => handleDragEnter(e, position)}\r\n\t\t\t\t\tonDragEnd={handleDragEnd}>\r\n\t\t\t\t<div className='col-3' style={{display: 'inline',backgroundColor:'#'+color}}>&nbsp;</div>\r\n\t\t\t\t<button className='btn' onClick={()=>setCurrent(position)} \r\n\t\t\t\t\tstyle={{fontWeight:selStyle, color:'#'+color}}>{desc}\r\n\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t});\r\n\tconst userInput=manualError?manualError:'Enter color (hex value)';\r\n    return (\r\n\t\t\t<div className='container'>\r\n\t\t\t\t<h2>React test task for fetching random colors</h2>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\tonClick={fetchColor} \r\n\t\t\t\t\t\t\tstyle={{color:'#'+ colors[current]}}>\r\n\t\t\t\t\t\t\tFetch new color\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<p>{error}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t\t<span>{userInput}</span><br />\r\n\t\t\t\t\t\t<input type='text' onKeyDown={userColor}></input>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{colorList}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n    );\r\n   \r\n}\r\n\r\n//helper to check if input value is hex color\r\nfunction isHex(val)\r\n{\r\n  return typeof val === 'string' \r\n\t  && val.length>2 && val.length<7\r\n      && !isNaN(Number('0x' + val))\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}